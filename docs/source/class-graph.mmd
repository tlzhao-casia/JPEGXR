classDiagram
    class tagFile {
        FILE *pFile
    }
    class tagBuf {
        +U8* pbBuf
        +size_t cbBuf
        +size_t cbCur
        +size_t cbBufCount
    }
    class State{
        tagFile file
        tagBuf buf
        void *pvObj
    }

    tagFile --* State
    tagBuf --* State
    State --* WMPStream
    class WMPStream {
        State state
        Bool fMem
        
        ERR Close(WMPStream **pme)
        Bool EOS(WMPStream *me)
        ERR Read(WMPStream *me, void *pv, size_t cb)
        ERR Write(WMPStream *me, const void *pv, size_t pb)
        ERR SetPos(WMPStream *me, size_t offPos)
        ERR GetPos(WMPStream *me, size_t *poffPos)
    }

    class PKImageEncode {
        ERR (*Initialize)(PKImageEncode*, struct WMPStream*, void*, size_t);
        ERR (*Terminate)(PKImageEncode*);

        ERR (*SetPixelFormat)(PKImageEncode*, PKPixelFormatGUID);
        ERR (*SetSize)(PKImageEncode*, I32, I32);
        ERR (*SetResolution)(PKImageEncode*, Float, Float);
        ERR (*SetColorContext)(PKImageEncode *pIE, const U8 *pbColorContext,
            U32 cbColorContext);
        ERR (*SetDescriptiveMetadata)(PKImageEncode *pIE,
            const DESCRIPTIVEMETADATA *pDescMetadata);

        ERR (*WritePixels)(PKImageEncode*, U32, U8*, U32);
        ERR (*WriteSource)(PKImageEncode*, PKFormatConverter*, PKRect*);

        ERR (*WritePixelsBandedBegin)(PKImageEncode* pEncoder, struct WMPStream *pPlanarAlphaTempFile);
        ERR (*WritePixelsBanded)(PKImageEncode* pEncoder, U32 cLines, U8* pbPixels, U32 cbStride, Bool fLastCall);
        ERR (*WritePixelsBandedEnd)(PKImageEncode* pEncoder);

        ERR (*Transcode)(PKImageEncode*, PKImageDecode*, CWMTranscodingParam*);

        ERR (*CreateNewFrame)(PKImageEncode*, void*, size_t);

        ERR (*Release)(PKImageEncode**);

        WMPStream* pStream;
        size_t offStart;

        PKPixelFormatGUID guidPixFormat;

        U32 uWidth;
        U32 uHeight;
        U32 idxCurrentLine;

        Float fResX;
        Float fResY;

        U32 cFrame;

        Bool fHeaderDone;
        size_t offPixel;
        size_t cbPixel;
        U8 *pbColorContext;
        U32 cbColorContext;
        U8 *pbEXIFMetadata;
        U32 cbEXIFMetadataByteCount;
        U8 *pbGPSInfoMetadata;
        U32 cbGPSInfoMetadataByteCount;
        U8 *pbIPTCNAAMetadata;
        U32 cbIPTCNAAMetadataByteCount;
        U8 *pbXMPMetadata;
        U32 cbXMPMetadataByteCount;
        U8 *pbPhotoshopMetadata;
        U32 cbPhotoshopMetadataByteCount;
        DESCRIPTIVEMETADATA sDescMetadata;

        Bool bWMP;

        WMP WMP
    }
    PKImageEncode_WMP --* PKImageEncode
    WMPStream --* PKImageEncode
    class PKImageEncode_WMP {
        WmpDEMisc wmiDEMisc;
        CWMImageInfo wmiI;
        CWMIStrCodecParam wmiSCP;
        void* ctxSC;
        CWMImageInfo wmiI_Alpha;
        CWMIStrCodecParam wmiSCP_Alpha;
        void* ctxSC_Alpha;

        Bool bHasAlpha;
        Long nOffImage;
        Long nCbImage;
        Long nOffAlpha;
        Long nCbAlpha;

        enumORIENTATION oOrientation;

        enumBANDEDENCSTATE      eBandedEncState;
        WMPStream   *pPATempFile;
    }
    WMPStream --* PKImageEncode_WMP
    WmpDEMisc --* PKImageEncode_WMP
    CWMImageInfo --* PKImageEncode_WMP
    CWMIStrCodecParam --* PKImageEncode_WMP

    class WmpDEMisc {
        U32 uImageOffset;
        U32 uImageByteCount;
        U32 uAlphaOffset;
        U32 uAlphaByteCount;

        U32 uOffPixelFormat;
        U32 uOffImageByteCount;
        U32 uOffAlphaOffset;
        U32 uOffAlphaByteCount;
        U32 uColorProfileOffset;
        U32 uColorProfileByteCount;
        U32 uXMPMetadataOffset;
        U32 uXMPMetadataByteCount;
        U32 uEXIFMetadataOffset;
        U32 uEXIFMetadataByteCount;
        U32 uGPSInfoMetadataOffset;
        U32 uGPSInfoMetadataByteCount;
        U32 uIPTCNAAMetadataOffset;
        U32 uIPTCNAAMetadataByteCount;
        U32 uPhotoshopMetadataOffset;
        U32 uPhotoshopMetadataByteCount;
        U32 uDescMetadataOffset;
        U32 uDescMetadataByteCount;
    }

    class CWMImageInfo {
        size_t cWidth;
        size_t cHeight;
        enumCOLORFORMAT cfColorFormat;
        enumBITDEPTH_BITS bdBitDepth;
        size_t cBitsPerUnit;
        size_t cLeadingPadding; 
        Bool bRGB; 
        U8 cChromaCenteringX; 
        U8 cChromaCenteringY; 
        size_t cROILeftX;
        size_t cROIWidth;
        size_t cROITopY;
        size_t cROIHeight;
        Bool   bSkipFlexbits;
        size_t cThumbnailWidth;
        size_t cThumbnailHeight;
        enumORIENTATION oOrientation;
        U8 cPostProcStrength; 
        Bool fPaddedUserBuffer;
    }

    class CWMIStrCodecParam{
        Bool bVerbose;

        U8 uiDefaultQPIndex;
        U8 uiDefaultQPIndexYLP;
        U8 uiDefaultQPIndexYHP;
        U8 uiDefaultQPIndexU;
        U8 uiDefaultQPIndexULP;
        U8 uiDefaultQPIndexUHP;
        U8 uiDefaultQPIndexV;
        U8 uiDefaultQPIndexVLP;
        U8 uiDefaultQPIndexVHP;
        U8 uiDefaultQPIndexAlpha;

        enumCOLORFORMAT cfColorFormat; 
        enumBITDEPTH bdBitDepth;
        enumOVERLAP olOverlap;
        BITSTREAMFORMAT bfBitstreamFormat;
        size_t cChannel; 
        U8 uAlphaMode; 
        SUBBAND sbSubband;  
        U8  uiTrimFlexBits;

        struct WMPStream* pWStream;
        size_t cbStream;

        
        U32  cNumOfSliceMinus1V;     
        U32 uiTileX[MAX_TILES]; 
        U32  cNumOfSliceMinus1H;     
        U32 uiTileY[MAX_TILES]; 

        U8 nLenMantissaOrShift;
        I8 nExpBias;

        Bool bBlackWhite;

        Bool bUseHardTileBoundaries; 
    
        Bool bProgressiveMode; 

        Bool bYUVData; 
        Bool bUnscaledArith; 

        Bool fMeasurePerf;
    }

    class WMPENCAPPARGS {
        char* szInputFile;
        char* szOutputFile;
        
        PKPixelFormatGUID guidPixFormat;

        CWMIStrCodecParam wmiSCP;
        float fltImageQuality;
        Bool bOverlapSet;
        Bool bColorFormatSet;
    }

    PKPixelFormatGUID --* WMPENCAPPARGS
    CWMIStrCodecParam --* WMPENCAPPARGS

    class PKPixelFormatGUID{
        unsigned int Data1;
        unsigned int Data2;
        unsigned int Data3;
        unsigned int Data4[8];
    }

    class PKImageDecode {
        ERR (*Initialize)(PKImageDecode*, struct WMPStream* pStream);

        ERR (*GetPixelFormat)(PKImageDecode*, PKPixelFormatGUID*);
        ERR (*GetSize)(PKImageDecode*, I32*, I32*);
        ERR (*GetResolution)(PKImageDecode*, Float*, Float*);
        ERR (*GetColorContext)(PKImageDecode *pID, U8 *pbColorContext,
            U32 *pcbColorContext);
        ERR (*GetDescriptiveMetadata)(PKImageDecode *pIE,
            DESCRIPTIVEMETADATA *pDescMetadata);

        ERR (*GetRawStream)(PKImageDecode*, struct WMPStream**);

        ERR (*Copy)(PKImageDecode*, const PKRect*, U8*, U32);

        ERR (*GetFrameCount)(PKImageDecode*, U32*);
        ERR (*SelectFrame)(PKImageDecode*, U32);

        ERR (*Release)(PKImageDecode**);

        WMPStream* pStream;
        Bool fStreamOwner;
        size_t offStart;
        
        PKPixelFormatGUID guidPixFormat;

        U32 uWidth;
        U32 uHeight;
        U32 idxCurrentLine;

        Float fResX;
        Float fResY;

        U32 cFrame;

        WMP WMP;
    }

    WMPStream --* PKImageDecode
    PKPixelFormatGUID --* PKImageDecode
    PKImageDecode_WMP --* PKImageDecode

    class PKImageDecode_WMP {
        WmpDEMisc wmiDEMisc;
        CWMImageInfo wmiI;
        CWMIStrCodecParam wmiSCP;
        void* ctxSC;
        CWMImageInfo wmiI_Alpha;
        CWMIStrCodecParam wmiSCP_Alpha;
        void* ctxSC_Alpha;

        Bool bHasAlpha;
        Long nOffImage;
        Long nCbImage;
        Long nOffAlpha;
        Long nCbAlpha;
        Bool bIgnoreOverlap;
        size_t DecoderCurrMBRow;
        size_t DecoderCurrAlphaMBRow;
        size_t cMarker;
        size_t cLinesDecoded;
        size_t cLinesCropped;
        Bool fFirstNonZeroDecode;

        Bool fOrientationFromContainer;
        enumORIENTATION oOrientationFromContainer;
            
        DESCRIPTIVEMETADATA sDescMetadata;
    }
    WmpDEMisc --* PKImageDecode_WMP
    CWMImageInfo --* PKImageDecode_WMP
    CWMIStrCodecParam --* PKImageDecode_WMP
    DESCRIPTIVEMETADATA --* PKImageDecode_WMP

    class DESCRIPTIVEMETADATA {
        DPKPROPVARIANT  pvarImageDescription;  
        DPKPROPVARIANT  pvarCameraMake;        
        DPKPROPVARIANT  pvarCameraModel;        
        DPKPROPVARIANT  pvarSoftware;           
        DPKPROPVARIANT  pvarDateTime;          
        DPKPROPVARIANT  pvarArtist;            
        DPKPROPVARIANT  pvarCopyright;         
        DPKPROPVARIANT  pvarRatingStars;        
        DPKPROPVARIANT  pvarRatingValue;       
        DPKPROPVARIANT  pvarCaption;            
        DPKPROPVARIANT  pvarDocumentName;      
        DPKPROPVARIANT  pvarPageName;          
        DPKPROPVARIANT  pvarPageNumber;         
        DPKPROPVARIANT  pvarHostComputer;      
    }
    DPKPROPVARIANT --* DESCRIPTIVEMETADATA
    class DPKPROPVARIANT {
        enumDPKVARTYPE vt;
        VT vt;
    }
    class unionDPKPROPVARIANT_VT {
        U8 bVal;       
        U16 uiVal;      
        U32 ulVal;      
        char *pszVal;  
        U16 *pwszVal;   
        U8 *pbVal;
    }
    unionDPKPROPVARIANT_VT --* DPKPROPVARIANT

    class PKFormatConverter {
        ERR (*Initialize)(PKFormatConverter*, PKImageDecode*, char *pExt, PKPixelFormatGUID);
        ERR (*InitializeConvert)(PKFormatConverter* pFC, const PKPixelFormatGUID enPFFrom,
                                char *pExt, PKPixelFormatGUID enPFTTo);

        ERR (*GetPixelFormat)(PKFormatConverter*, PKPixelFormatGUID*);
        ERR (*GetSourcePixelFormat)(PKFormatConverter*, PKPixelFormatGUID*);
        ERR (*GetSize)(PKFormatConverter*, I32*, I32*);
        ERR (*GetResolution)(PKFormatConverter*, Float*, Float*);

        ERR (*Copy)(PKFormatConverter*, const PKRect*, U8*, U32);
        ERR (*Convert)(PKFormatConverter*, const PKRect*, U8*, U32);

        ERR (*Release)(PKFormatConverter**);

        PKImageDecode* pDecoder;
        PKPixelFormatGUID enPixelFormat;
    }
    PKImageDecode --* PKFormatConverter
    PKPixelFormatGUID --* PKFormatConverter

    class PKPixelInfo {
        const PKPixelFormatGUID* pGUIDPixFmt;

        size_t cChannel;
        enumCOLORFORMAT cfColorFormat;
        enumBITDEPTH_BITS bdBitDepth;
        U32 cbitUnit;
        
        WMP_GRBIT grBit;

        U32 uInterpretation;
        U32 uSamplePerPixel;
        U32 uBitsPerSample;
        U32 uSampleFormat;
    }
    PKPixelFormatGUID --* PKPixelInfo